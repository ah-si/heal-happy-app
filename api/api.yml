openapi: 3.0.0info:  title: Soignez Heureux API v1  description: Soignez Heureux API v1  contact:    email: jimmy.aumard@gmail.com  license:    name: MIT License  version: v1security:  - Bearer:      [ ]paths:  /api/v1/donations/donate:    get:        parameters:        - in: query          name: id          schema:              type: string          required: true        - in: query          name: mode          schema:           type: string           enum:            - payment            - subscription          required: true        - in: query          name: email          schema:           type: string          required: false        operationId: getSessionInfo        responses:         "200":           description: Session info           content:              application/json:                schema:                  type: object                  title: SessionInfo                  required:                   - id                   - url                  properties:                    id:                        type: string                        nullable: false                    url:                        type: string                        nullable: false        tags:        - donations  /api/v1/donations/products:      get:          operationId: getProducts          responses:           "200":             description: Products list             content:                application/json:                  schema:                    type: array                    items:                        type: object                        title: Product                        required:                         - id                         - name                         - price                         - currency                         - isRecurrent                        properties:                          id:                              type: string                              nullable: false                          name:                              type: string                              nullable: false                          currency:                              type: string                              nullable: false                          isRecurrent:                              type: boolean                              nullable: false                          price:                              type: integer                              nullable: false          tags:          - donations  /api/v1/offices/{id}/events:        parameters:         - in: path           name: id           schema:             type: string           required: true        get:          operationId: getOfficeEvents          responses:              "200":                description: "office events"                content:                    application/json:                      schema:                          type: array                          items:                            "$ref": "#/components/schemas/UserEvent"          tags:             - offices  /api/v1/offices/{id}/managers:        parameters:         - in: path           name: id           schema:             type: string           required: true        post:          operationId: addManager          requestBody:              required: true              content:                application/json:                  schema:                    "$ref": "#/components/schemas/UserEmail"          responses:              201:                description: ""          tags:             - offices  /api/v1/offices/{id}/managers/{managerId}:      parameters:       - in: path         name: id         schema:           type: string         required: true       - in: path         name: managerId         schema:           type: string         required: true      delete:        operationId: removeManager        responses:            204:              description: ""        tags:           - offices  /api/v1/offices/rooms/{id}/healers:      parameters:       - in: path         name: id         schema:           type: string         required: true      post:        operationId: addHealerToRoom        requestBody:            required: true            content:              application/json:                schema:                  "$ref": "#/components/schemas/UserEmail"        responses:            201:              description: ""        tags:           - offices  /api/v1/offices/rooms/{id}/healers/{healerId}:    parameters:     - in: path       name: id       schema:         type: string       required: true     - in: path       name: healerId       schema:         type: string       required: true    delete:      operationId: removeHealerFromRoom      responses:          204:            description: ""      tags:         - offices  /api/v1/offices/{id}:    parameters:     - in: path       name: id       schema:         type: string       required: true    get:      operationId: getOffice      responses:          "200":            description: Office data            content:               application/json:                 schema:                  "$ref": "#/components/schemas/Office"      tags:       - offices    put:        operationId: updateOffice        requestBody:            required: true            content:              application/json:                schema:                  "$ref": "#/components/schemas/OfficeInfo"        responses:            200:              description: ""              content:                application/json:                  schema:                    "$ref": "#/components/schemas/OfficeInfo"        tags:           - offices  /api/v1/offices/{id}/rooms:    parameters:     - in: path       name: id       schema:         type: string       required: true    post:        operationId: addRoom        requestBody:            required: true            content:              application/json:                schema:                  "$ref": "#/components/schemas/OfficeRoom"        responses:            200:              description: ""              content:                application/json:                  schema:                    "$ref": "#/components/schemas/OfficeRoom"        tags:           - offices  /api/v1/offices/rooms/{id}:    parameters:      - in: path        name: id        schema:         type: string        required: true    put:        operationId: updateRoom        requestBody:            required: true            content:              application/json:                schema:                  "$ref": "#/components/schemas/OfficeRoom"        responses:            200:              description: ""              content:                application/json:                  schema:                    "$ref": "#/components/schemas/OfficeRoom"        tags:           - offices    delete:        operationId: deleteRoom        responses:            204:              description: ""        tags:           - offices  /api/v1/offices:    get:        operationId: getOffices        responses:            "200":              description: Offices data              content:                 application/json:                   schema:                    "$ref": "#/components/schemas/PaginatedOffices"        tags:         - offices    post:        operationId: createOffice        requestBody:            required: true            content:              application/json:                schema:                  "$ref": "#/components/schemas/OfficeInfo"        responses:            200:              description: ""              content:                application/json:                  schema:                    "$ref": "#/components/schemas/OfficeInfo"        tags:           - offices  /api/v1/admin/dashboard:    get:       operationId: getDashboard       responses:        "200":          description: Dashboard data          content:             application/json:               schema:                "$ref": "#/components/schemas/Dashboard"       tags:       - admin  /api/v1/admin/events:      get:        parameters:        - in: query          name: start          schema:              type: string              format: date          required: true        - in: query          name: end          schema:           type: string           format: date          required: true        - in: query          name: email          schema:           type: string          required: false        - in: query          name: isUrgent          schema:           type: boolean          required: false        - in: query          name: isCancelled          schema:           type: boolean          required: false        operationId: searchEvents        responses:         "200":           description: Healer stats           content:              application/json:                schema:                  "$ref": "#/components/schemas/PaginatedEvents"        tags:         - admin  /api/v1/admin/healers/stats:    get:      parameters:      - in: query        name: start        schema:            type: string            format: date        required: true      - in: query        name: end        schema:         type: string         format: date        required: true      operationId: getHealerStats      responses:       "200":         description: Healer stats         content:            application/json:              schema:                type: array                items:                    "$ref": "#/components/schemas/HealerStats"      tags:       - admin  /api/v1/admin/users:      get:          parameters:          - in: query            name: page            schema:                type: integer            required: true          - in: query            name: query            schema:             type: string            required: false          - in: query            name: type            schema:                "$ref": "#/components/schemas/UserTypeEnum"            required: false          - in: query            name: job            schema:                type: string            required: false          - in: query            name: isActivated            schema:              type: boolean            required: false          - in: query            name: canDoFaceToFace            schema:              type: boolean            required: false          - in: query            name: isVerified            schema:                type: boolean            required: false          operationId: searchUsers          responses:           "200":             description: User created             content:                application/json:                  schema:                    "$ref": "#/components/schemas/PaginatedUsers"          tags:          - admin      post:        operationId: createUser        requestBody:          required: true          content:            application/json:              schema:                "$ref": "#/components/schemas/User"        responses:         "200":           description: User created           content:              application/json:                schema:                 "$ref": "#/components/schemas/User"        tags:        - admin  /api/v1/admin/users/{id}/verify:      parameters:       - in: path         name: id         schema:           type: string         required: true      post:        operationId: verifyUser        responses:         "200":           description: User verified           content:              application/json:                schema:                 "$ref": "#/components/schemas/User"        tags:        - admin  /api/v1/admin/users/{id}:    parameters:     - in: path       name: id       schema:         type: string       required: true    get:      operationId: getUser      responses:       "200":         description: User         content:           application/json:             schema:              "$ref": "#/components/schemas/User"      tags:      - admin    delete:      operationId: deleteUser      responses:       "202":         description: User deleted      tags:      - admin    put:      operationId: updateUser      requestBody:        required: true        content:          application/json:            schema:              "$ref": "#/components/schemas/User"      responses:       "200":         description: User updated         content:            application/json:              schema:               "$ref": "#/components/schemas/User"      tags:      - admin  /api/v1/auth/askResetPassword:    post:      operationId: askResetPassword      description: ""      requestBody:        required: true        content:          application/json:            schema:              type: object              title: askResetPassword              required:                - email              properties:                email:                  type: string                  nullable: false      responses:        200:          description: ""      tags:        - auth      security:        [ ]  /api/v1/auth/resetPassword:    post:        operationId: resetPassword        description: ""        requestBody:          required: true          content:            application/json:              schema:                type: object                title: resetPassword                required:                  - password                properties:                  password:                    type: string                    nullable: false                  token:                    type: string                    nullable: false        responses:          200:            description: ""        tags:          - auth        security:          [ ]  /api/v1/auth/login:    post:      operationId: login      description: ""      requestBody:        required: true        content:          application/json:            schema:              "$ref": "#/components/schemas/LoginRequest"      responses:        200:          description: ""          content:            application/json:              schema:                "$ref": "#/components/schemas/LoginResponse"      tags:        - auth      security:        [ ]  /api/v1/auth/register:    post:      operationId: register      description: ""      requestBody:        required: true        content:          application/json:            schema:              "$ref": "#/components/schemas/User"      responses:        200:          description: ""          content:            application/json:              schema:                "$ref": "#/components/schemas/LoginResponse"      tags:        - auth      security:        [ ]  /api/v1/auth/token/refresh:      post:        operationId: refreshToken        description: ""        requestBody:          required: true          content:            application/json:              schema:                type: object                title: RefreshTokenRequest                properties:                    refreshToken:                        type: string                        nullable: false        responses:          200:            description: ""            content:              application/json:                schema:                    "$ref": "#/components/schemas/LoginResponse"        tags:          - auth        security:          [ ]  /api/v1/healers/localities:      parameters:        - name: job          in: query          required: true          schema:            type: string      get:        operationId: getLocalities        description: ""        responses:          "200":            description: All good            content:              application/json:                schema:                  type: object                  additionalProperties:                    type: string        tags:          - user        security:         [ ]  /api/v1/healers/specialities:      parameters:        - name: onlyExisting          in: query          required: false          schema:            type: boolean      get:        operationId: getSpecialities        description: ""        responses:          "200":            description: All good            content:              application/json:                schema:                  type: object                  additionalProperties:                    type: string        tags:          - user        security:         [ ]  /api/v1/healers/search:    parameters:      - name: job        in: query        required: true        schema:          type: string      - name: localization        in: query        required: false        schema:          type: string      - name: type        in: query        required: true        schema:          "$ref": "#/components/schemas/HealerEventType"      - name: page        in: query        required: true        schema:          type: integer    get:      operationId: searchHealers      description: ""      responses:        "200":          description: All good          content:            application/json:              schema:                "$ref": "#/components/schemas/PaginatedHealers"      tags:        - user  /api/v1/healers/{id}:    parameters:     - in: path       name: id       schema:         type: string       required: true    get:      operationId: getHealerProfile      description: ""      responses:        "200":          description: All good          content:            application/json:              schema:                "$ref": "#/components/schemas/Healer"      tags:        - user  /api/v1/healers/{id}/inviteToEvent:    parameters:         - in: path           name: id           schema:             type: string           required: true    post:      operationId: createInviteEvent      description: ""      requestBody:        content:          application/json:            schema:              "$ref": "#/components/schemas/CreateInviteEventRequest"      responses:        "201":          description: All good, event created      tags:        - user  /api/v1/healers/{id}/events:    parameters:     - in: path       name: id       schema:         type: string       required: true    post:      operationId: createEvent      description: ""      requestBody:        content:          application/json:            schema:              "$ref": "#/components/schemas/CreateEventRequest"      responses:        "201":          description: All good, event created      tags:        - user  /api/v1/healers/{id}/availabilities:    parameters:     - in: path       name: id       schema:         type: string       required: true     - in: query       name: from       schema:         type: string         format: date-time       required: true     - in: query       name: type       schema:          "$ref": "#/components/schemas/HealerEventType"       required: true    get:        operationId: getHealerAvailabilities        description: ""        responses:          "200":            description: All good            content:              application/json:                schema:                  "$ref": "#/components/schemas/HealerAvailabilities"        tags:          - user  /api/v1/users/me/resendActivationLink:    get:        operationId: resendActivationLink        responses:         "204":           description: Email sent        tags:        - user  /api/v1/users/me/events/{eventId}/accept:    parameters:      - in: path        name: eventId        schema:         type: string        required: true    post:      operationId: acceptEvent      responses:         "201":           description: Event accepted      tags:      - user  /api/v1/users/me/events/{eventId}:    parameters:    - in: path      name: eventId      schema:       type: string      required: true    delete:      operationId: deleteEvent      requestBody:        required: true        content:          application/json:            schema:              type: object              title: DeleteEventRequest              required:              - message              properties:                  message:                      type: string                      nullable: false      responses:       "202":         description: Event deleted      tags:      - user    patch:      operationId: updateEvent      requestBody:          content:            application/json:              schema:                "$ref": "#/components/schemas/UpdateEventRequest"      responses:       "200":         description: Event updated         content:            application/json:              schema:                "$ref": "#/components/schemas/UserEvent"      tags:      - user  /api/v1/users/me/events:      parameters:      - in: query        name: includePastEvents        schema:         type: boolean        required: false      - in: query        name: modeHealer        schema:         type: boolean        required: true      get:        operationId: getEvents        description: ""        responses:          "200":            description: All good            content:              application/json:                schema:                  type: array                  items:                    "$ref": "#/components/schemas/UserEvent"        tags:          - user  /api/v1/users/{userId}/openings/{openingId}:    parameters:    - in: path      name: openingId      schema:       type: string      required: true    - in: path      name: userId      schema:       type: string      required: true    delete:      operationId: deleteUserOpening      responses:       "204":         description: Opening deleted      tags:      - user    patch:      operationId: updateUserOpening      requestBody:          content:            application/json:              schema:                "$ref": "#/components/schemas/HealerOpening"      responses:       "200":         description: HealerOpening updated         content:            application/json:              schema:                "$ref": "#/components/schemas/HealerOpening"      tags:      - user  /api/v1/users/{userId}/openings:      parameters:      - in: path        name: userId        schema:         type: string        required: true      get:        operationId: getUserOpenings        description: ""        responses:          "200":            description: All good            content:              application/json:                schema:                  type: array                  items:                    "$ref": "#/components/schemas/HealerOpening"        tags:          - user      post:        operationId: createUserOpening        requestBody:            content:              application/json:                schema:                  "$ref": "#/components/schemas/HealerOpening"        responses:         "200":           description: HealerOpening created           content:              application/json:                schema:                  "$ref": "#/components/schemas/HealerOpening"        tags:        - user  /api/v1/users/me/openings/{openingId}:    parameters:    - in: path      name: openingId      schema:       type: string      required: true    delete:      operationId: deleteOpening      responses:       "204":         description: Opening deleted      tags:      - user    patch:      operationId: updateOpening      requestBody:          content:            application/json:              schema:                "$ref": "#/components/schemas/HealerOpening"      responses:       "200":         description: HealerOpening updated         content:            application/json:              schema:                "$ref": "#/components/schemas/HealerOpening"      tags:      - user  /api/v1/users/me/openings:      get:        operationId: getOpenings        description: ""        responses:          "200":            description: All good            content:              application/json:                schema:                  type: array                  items:                    "$ref": "#/components/schemas/HealerOpening"        tags:          - user      post:        operationId: createOpening        requestBody:            content:              application/json:                schema:                  "$ref": "#/components/schemas/HealerOpening"        responses:         "200":           description: HealerOpening created           content:              application/json:                schema:                  "$ref": "#/components/schemas/HealerOpening"        tags:        - user  /api/v1/users/me/avatar:    put:      operationId: putAvatar      requestBody:        content:          multipart/form-data:            schema:              type: object              properties:                avatar:                  type: string                  format: binary                  nullable: false      responses:        "200":          description: All good          content:            application/json:              schema:                "$ref": "#/components/schemas/FileData"      tags:        - user  /api/v1/users/me/diploma:      put:        operationId: putDiploma        requestBody:          content:            multipart/form-data:              schema:                type: object                properties:                  diploma:                    type: string                    format: binary                    nullable: false        responses:            "200":              description: All good              content:                application/json:                  schema:                    "$ref": "#/components/schemas/FileData"        tags:        - user  /api/v1/users/me/terms:    put:      operationId: putTerms      requestBody:        content:          multipart/form-data:            schema:              type: object              properties:                terms:                  type: string                  format: binary                  nullable: false      responses:          "200":            description: All good            content:              application/json:                schema:                  "$ref": "#/components/schemas/FileData"      tags:      - user  /api/v1/settings:    get:        operationId: getSettings        responses:          "200":            description: All good            content:              application/json:                schema:                  "$ref": "#/components/schemas/AppSettings"        tags:          - settings        security:         [ ]  /api/v1/admin/settings:    patch:        operationId: updateSettings        requestBody:            content:              application/json:                schema:                  "$ref": "#/components/schemas/AppSettings"        responses:          "200":            description: All good        tags:          - settings  /api/v1/users/me:    get:      operationId: getProfile      description: ""      responses:        "200":          description: All good          content:            application/json:              schema:                "$ref": "#/components/schemas/User"      tags:        - user    put:      operationId: saveProfile      description: ""      requestBody:        content:          application/json:            schema:              "$ref": "#/components/schemas/User"      responses:        "200":          description: All good          content:            application/json:              schema:                "$ref": "#/components/schemas/User"      tags:        - userservers:  - url: https://soignez-heureux.com  - url: https://soignez-heureux.ah-si.orgcomponents:  securitySchemes:    Bearer:      in: header      name: Authorization      type: apiKey  schemas:    FileData:      type: object      required:      - path      properties:        path:          type: string          nullable: false    HealerStats:        type: object        required:         - id         - job         - lastName         - firstName         - email         - city         - zipCode         - totalEvents         - totalDuration         - totalEventsFaceToFace         - totalDurationFaceToFace        properties:          id:           type: string           nullable: false          totalEvents:            type: integer            nullable: false          totalDuration:            type: integer            nullable: false          totalEventsFaceToFace:            type: integer            nullable: false          totalDurationFaceToFace:            type: integer            nullable: false          street:           type: string           nullable: true          street2:           type: string           nullable: true          city:           type: string           nullable: false          zipCode:           type: string           nullable: false          firstName:           type: string           nullable: false          lastName:           type: string           nullable: false          email:           type: string           nullable: false          mobile:           type: string           nullable: true          job:           type: string           nullable: false    PaginatedHealers:      type: object      required:       - healers       - totalPages      properties:        totalPages:          type: integer          nullable: false        healers:          nullable: false          type: array          items:            "$ref": "#/components/schemas/Healer"    PaginatedEvents:      type: object      required:       - events       - totalPages      properties:        totalPages:          type: integer          nullable: false        events:          nullable: false          type: array          items:            "$ref": "#/components/schemas/AdminUserEvent"    PaginatedUsers:      type: object      required:       - users       - totalPages      properties:        totalPages:          type: integer          nullable: false        users:          nullable: false          type: array          items:            "$ref": "#/components/schemas/User"    PaginatedOffices:          type: object          required:           - offices           - totalPages          properties:            totalPages:              type: integer              nullable: false            offices:              nullable: false              type: array              items:                "$ref": "#/components/schemas/Office"    UserEmail:      type: object      required:        - email      properties:          email:            type: string            nullable: false    LoginRequest:      type: object      required:        - email        - password      properties:        email:          type: string          nullable: false        password:          type: string          nullable: false    LoginResponse:      type: object      required:        - token        - refreshToken      properties:        token:          type: string          nullable: false        refreshToken:          type: string          nullable: false    UpdateEventRequest:        type: object        required:        - start        properties:         start:             type: string             format: date-time             nullable: false         message:           type: string           nullable: true    AdminUserEvent:        type: object        required:          - id          - createdAt          - link          - start          - end          - name          - isCancelled          - isHealerPresent          - isPatientPresent          - healer          - isUrgent          - patient        properties:           id:             type: string             nullable: false           patient:             nullable: false             $ref: '#/components/schemas/User'           healer:             nullable: false             $ref: '#/components/schemas/User'           isHealerPresent:            nullable: false            type: boolean           isPatientPresent:            nullable: false            type: boolean           isUrgent:            nullable: false            type: boolean           isCancelled:            nullable: false            type: boolean           createdAt:             type: string             format: date-time             nullable: false           start:             type: string             format: date-time             nullable: false           end:             type: string             format: date-time             nullable: false           name:             type: string             nullable: false           description:             type: string             nullable: true           cancelledDescription:             type: string             nullable: true           link:             type: string             format: url             nullable: false    OfficeInfo:        type: object        required:          - name          - street          - street2          - city          - zipCode        properties:          id:            type: string            nullable: false            readOnly: true          name:            type: string            nullable: false          street:            type: string            nullable: false          street2:            type: string            nullable: false          city:            type: string            nullable: false          zipCode:            type: string            nullable: false    Office:        required:          - name          - street          - street2          - city          - zipCode          - rooms          - managers        allOf:        - $ref: '#/components/schemas/OfficeInfo'        - type: object        properties:          rooms:            nullable: false            type: array            items:                $ref: '#/components/schemas/OfficeRoom'          managers:            nullable: false            type: array            items:              $ref: '#/components/schemas/User'    OfficeRoom:        type: object        required:          - officeId          - name          - healers        properties:          id:            type: string            nullable: false            readOnly: true          officeId:            type: string            nullable: false          name:            type: string            nullable: false          healers:            nullable: false            type: array            items:              $ref: '#/components/schemas/User'    MinimalUser:        type: object        required:          - id          - firstName          - lastName          - email          - mobile        properties:           id:             type: string             nullable: false           firstName:             type: string             nullable: false           lastName:             type: string             nullable: false           mobile:             type: string             nullable: false           email:             type: string             format: email             nullable: false    UserEvent:        type: object        required:          - id          - createdAt          - link          - start          - end          - name          - isCancelled          - isPatientPresent          - isHealerPresent          - healer          - type          - isUrgent          - patient        properties:           id:             type: string             nullable: false           patientToken:             type: string             nullable: true           patient:             nullable: false             $ref: '#/components/schemas/MinimalUser'           healer:             nullable: false             $ref: '#/components/schemas/Healer'           room:             nullable: true             $ref: '#/components/schemas/OfficeRoom'           office:             nullable: true             $ref: '#/components/schemas/Office'           isUrgent:            nullable: false            type: boolean           isHealerPresent:            nullable: false            type: boolean           isPatientPresent:            nullable: false            type: boolean           isCancelled:            nullable: false            type: boolean           type:            nullable: false            $ref: '#/components/schemas/HealerEventType'           createdAt:             type: string             format: date-time             nullable: false           start:             type: string             format: date-time             nullable: false           end:             type: string             format: date-time             nullable: false           name:             type: string             nullable: false           description:             type: string             nullable: true           cancelledDescription:             type: string             nullable: true           link:             type: string             format: url             nullable: false    HealerOpening:        type: object        required:          - start          - end          - type          - userId        properties:           id:             type: string             nullable: false           userId:             type: string             nullable: false           roomId:             type: string             nullable: true           type:            nullable: false            $ref: '#/components/schemas/OpeningType'           user:            nullable: true            $ref: '#/components/schemas/Healer'           repeat:            nullable: false            $ref: '#/components/schemas/OpeningRepeatType'           start:             type: string             format: date-time             nullable: false           end:             type: string             format: date-time             nullable: false    OpeningType:        type: string        enum:        - visio        - faceToFace        - unavailable    OpeningRepeatType:        type: string        enum:        - daily        - weekly        - monthly    CreateInviteEventRequest:        type: object        required:          - email          - type          - start        properties:          slot:            type: string            format: date-time            nullable: false          roomId:            type: string            nullable: true          email:            type: string            nullable: false          mobile:            type: string            nullable: false          firstName:            type: string            nullable: false          lastName:            type: string            nullable: false          type:            nullable: false            $ref: '#/components/schemas/HealerEventType'          message:            type: string            nullable: false    HealerEventType:        type: string        enum:        - visio        - faceToFace    CreateEventRequest:        type: object        required:          - patientId          - slot        properties:          slot:            type: string            format: date-time            nullable: false          roomId:            type: string            nullable: true          isUrgent:            type: boolean            nullable: false          patientId:            type: string            nullable: false          type:            "$ref": "#/components/schemas/HealerEventType"          message:            type: string            nullable: false    HealerAvailabilities:        type: object        required:          - until          - slots        properties:          slots:            type: array            nullable: false            items:              type: object              title: Slot              required:                - slots              properties:                roomId:                  type: string                  nullable: true                slots:                  type: array                  nullable: false                  items:                    type: string                    format: date-time          until:            type: string            nullable: false    DashboardUser:        required:        - total        - type        - isActivated        - isVerified        type: object        properties:            type:              "$ref": "#/components/schemas/UserTypeEnum"            isActivated:              type: boolean              nullable: false            isVerified:              type: boolean              nullable: false            total:              type: integer              nullable: false    DashboardEvent:        required:        - total        - month        - year        - isUrgent        - isCancelled        type: object        properties:            year:              type: integer              nullable: false            month:              type: integer              nullable: false            total:              type: integer              nullable: false            isUrgent:              nullable: false              type: boolean            isCancelled:              nullable: false              type: boolean    Dashboard:        type: object        required:         - users         - events        properties:            users:              nullable: false              type: array              items:                $ref: '#/components/schemas/DashboardUser'            events:              nullable: false              type: array              items:                $ref: '#/components/schemas/DashboardEvent'    AppSettings:      required:        - enableUrgencyButton      type: object      properties:        enableUrgencyButton:          type: boolean          nullable: false    User:      required:      - email      - mobile      - type      - firstName      - lastName      - lang      allOf:      - $ref: '#/components/schemas/Healer'      - type: object        properties:          id:            type: string            nullable: true          email:            type: string            format: email            nullable: false          mobile:            type: string            nullable: true          password:            type: string            nullable: true    Healer:      required:      - type      - firstName      - lastName      - lang      - city      - zipCode      - isActivated      - isVerified      - isAddressPublic      - consultationDuration      - isTermsAccepted      - description      - country      type: object      properties:        id:          type: string          readOnly: true          nullable: false        isVerified:            type: boolean            nullable: false        isActivated:            type: boolean            nullable: false        canDoFaceToFace:            type: boolean            nullable: false            readOnly: true        job:            type: string            nullable: true        firstName:            type: string            nullable: false        consultationDuration:            type: integer            nullable: true        isAddressPublic:            type: boolean            default: false            nullable: false        isTermsAccepted:            type: boolean            nullable: false        versionTermsAccepted:            type: string            nullable: true        lang:            type: string            nullable: false        type:            "$ref": "#/components/schemas/UserTypeEnum"        experiences:            type: string            nullable: true        description:            type: string            nullable: true        diploma:            type: string            nullable: true        website:            type: string            nullable: true        social1:            type: string            nullable: true        social2:            type: string            nullable: true        social3:            type: string            nullable: true        lastName:            type: string            nullable: false        street:            type: string            nullable: true        street2:            type: string            nullable: true        zipCode:            type: string            nullable: false        country:            type: string            nullable: false        city:            type: string            nullable: false        avatar:            type: string            nullable: true    UserTypeEnum:        type: string        enum:         - admin         - patient         - healer